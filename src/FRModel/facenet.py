# -*- coding: utf-8 -*-
"""FaceNet.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PcA7nGBtw-9K2Rj_1zV9ZCe_gLsfp3eK

# **Original Data Acquisition**

We first obtain the original dataset of labeled celebrity images from Kaggle
"""


"""# **Loading FaceNet Model**
Now we load a pretrained FR model
"""
""" may need to first run
pip install facenet-pytorch

and

/Applications/Python\ 3.12/Install\ Certificates.command
 -- pip install --upgrade certifi

 inside terminal
"""
from facenet_pytorch import MTCNN, InceptionResnetV1
import torch
from torch.utils.data import DataLoader
from torchvision import datasets
import numpy as np
import pandas as pd
import sys

### Adjust how much output to print here
pd.set_option('display.max_columns', None)
pd.set_option('display.max_rows', None)
pd.set_option('display.width', None)
pd.set_option('display.max_colwidth', None)

sys.stdout = open('output.txt', 'w')  # or 'a' to append


workers = 0

device = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')
print('Running on device: {}'.format(device))

mtcnn = MTCNN(
    image_size=160, margin=0, min_face_size=20,
    thresholds=[0.6, 0.7, 0.7], factor=0.709, post_process=True,
    device=device
)

resnet = InceptionResnetV1(pretrained='vggface2').eval().to(device)

"""We set up the pairing between image and labels"""

def collate_fn(x):
    return x[0]

dataset = datasets.ImageFolder('CelebrityFacesDataset')
dataset.idx_to_class = {i:c for c, i in dataset.class_to_idx.items()}
loader = DataLoader(dataset, collate_fn=collate_fn, num_workers=workers)

"""# **Image Preprocess and Face Detection**
According to the MTCNN documentation, it returns images cropped to the detected face, if a face was detected.
"""

aligned = []
names = []
for x, y in loader:
    x_aligned, prob = mtcnn(x, return_prob=True)
    if x_aligned is not None:
        #print('Face detected with probability: {:8f}'.format(prob))
        aligned.append(x_aligned)
        names.append(dataset.idx_to_class[y])
        #print(type(aligned))

#print(type(aligned))

"""# **Calculate Embeddings**

"""

aligned = torch.stack(aligned).to(device)
embeddings = resnet(aligned).detach().cpu()

"""# **Compute Average Over Category**"""


"""# **Displaying Embedding Table**"""

dists = [[(e1 - e2).norm().item() for e2 in embeddings] for e1 in embeddings]
print(pd.DataFrame(dists, columns=names, index=names))

sys.stdout.close()
